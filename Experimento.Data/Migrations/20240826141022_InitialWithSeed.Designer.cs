// <auto-generated />
using System;
using Experimento.Data.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Experimento.Data.Migrations
{
    [DbContext(typeof(ExperimentoContext))]
    [Migration("20240826141022_InitialWithSeed")]
    partial class InitialWithSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Experimento.Domain.Entities.Ride", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("Date");

                    b.Property<string>("RiderId")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id")
                        .HasName("PK_RIDE");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("RiderId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Ride", (string)null);
                });

            modelBuilder.Entity("Experimento.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("PK_USER");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Experimento.Domain.Entities.Vehicle", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Id");

                    b.Property<int>("Capacity")
                        .HasMaxLength(5)
                        .HasColumnType("integer")
                        .HasColumnName("Capacity");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Plate");

                    b.HasKey("Id")
                        .HasName("PK_VEHICLE");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("OwnerId");

                    b.ToTable("Vehicle", (string)null);
                });

            modelBuilder.Entity("Experimento.Domain.Entities.Ride", b =>
                {
                    b.HasOne("Experimento.Domain.Entities.User", "Rider")
                        .WithMany()
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Experimento.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rider");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Experimento.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("Experimento.Domain.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });
#pragma warning restore 612, 618
        }
    }
}
